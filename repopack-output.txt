This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-03-26T12:08:02.663Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
constant.json
package.json
src/api/controllers/categoryController.ts
src/api/controllers/cookingStepController.ts
src/api/controllers/ingredientController.ts
src/api/controllers/mealController.ts
src/api/controllers/methodController.ts
src/api/controllers/methodTypeController.ts
src/api/repository/categoryRepository.ts
src/api/repository/cookingStepRepository.ts
src/api/repository/ingredientRepository.ts
src/api/repository/mealRepository.ts
src/api/repository/methodRepository.ts
src/api/repository/methodTypeRepository.ts
src/api/services/categoryService.ts
src/api/services/cookingStepService.ts
src/api/services/ingredientService.ts
src/api/services/mealService.ts
src/api/services/methodService.ts
src/api/services/methodTypeService.ts
src/config/swagger.ts
src/config/swaggerAutogen.ts
src/data/models/category.ts
src/data/models/cookingStep.ts
src/data/models/cookingStepDetail.ts
src/data/models/ingredient.ts
src/data/models/meal.ts
src/data/models/method.ts
src/data/models/methodType.ts
src/data/requests/mealRequest.ts
src/docs/swaggerDocs.ts
src/handlers/mealHandler.ts
src/middlewares/Authenticate.ts
src/routes/categoryRoute.ts
src/routes/cookingStepRoute.ts
src/routes/ingredientRoute.ts
src/routes/mealRoute.ts
src/routes/methodRoute.ts
src/routes/methodTypeRoute.ts
src/routes/routeIndex.ts
src/server.ts
src/swagger-output.json
src/utils/errorHandler.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules

================
File: constant.json
================
{
    "mongoURL" : "mongodb+srv://admin:S8FHNuGvj-AF7#2@cookingmeal.dnbid.mongodb.net/?retryWrites=true&w=majority&appName=CookingMeal"
}

================
File: package.json
================
{
  "name": "cooking_meal_service",
  "version": "1.0.0",
  "main": "src/server.ts",
  "scripts": {
    "build": "tsc",
    "dev": "nodemon --exec ts-node ./src/server.ts",
    "start": "nodemon ./dist/server.js",
    "prod": "npm run build && npm run start",
    "test": "echo \"Error: no test specified\" && exit 1",
    "swagger-autogen": "ts-node ./src/config/swaggerAutogen.ts"
  },
  "author": "quangvm",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cooking_meal_service": "file:",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "mongodb": "^6.15.0",
    "mongoose": "^8.12.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1"
  },
  "devDependencies": {
    "@types/express": "^5.0.1",
    "@types/node": "^22.13.10",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "nodemon": "^3.1.9",
    "swagger-autogen": "^2.23.7",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2"
  }
  
}

================
File: src/api/controllers/categoryController.ts
================
import {Request, Response} from 'express'
import * as categoryService from '../services/categoryService'

export const getCategorys = async (req: Request, res: Response) =>{
    try{
        const categorys = await categoryService.getAllCategorys();
        res.status(200).json(categorys);
    }catch(error){
        res.status(500).json({error: error});
    }
}

export const createCategory = async (req: Request, res: Response) =>{
    try{
        const category = await categoryService.createCategory(req.body);
        res.status(201).json(category);
    }catch(e){
        res.status(500).json({error: e});
    }
}

================
File: src/api/controllers/cookingStepController.ts
================
import {Request, Response} from 'express'
import * as cookingStepService from '../services/cookingStepService';

export const getAllCookingSteps = async (req: Request, res: Response) =>{
    try{
        const me = await cookingStepService.getAllCookingSteps();
        res.status(200).json(me);
    }catch(error){
        res.status(500).json({error: error});
    }
}

================
File: src/api/controllers/ingredientController.ts
================
import {Request, Response} from 'express'
import * as ingredientService from '../services/ingredientService'

export const getIngredients = async (req: Request, res: Response) =>{
    try{
        const ingredients = await ingredientService.getAllIngredients();
        res.status(200).json(ingredients);
    }catch(error){
        res.status(500).json({error: error});
    }
}

export const getIngredientById = async (req: Request, res: Response) =>{
    try{
        const ingredients = await ingredientService.getIngredientById(req.params.id);
        res.status(200).json(ingredients);
    }catch(e){
        res.status(500).json({error: e});
    }
}

export const createIngredient = async (req: Request, res: Response) =>{
    try{
        const ingredient = await ingredientService.createIngredient(req.body);
        res.status(201).json(ingredient);
    }catch(e){
        res.status(500).json({error: e});
    }
}

================
File: src/api/controllers/mealController.ts
================
import {Request, Response} from 'express'
import * as mealService from '../services/mealService'

export const getMeals = async (req: Request, res: Response) =>{
    try{
        const meals = await mealService.getAllMeals();
        res.status(200).json(meals);
    }catch(error){
        res.status(500).json({error: error});
    }
}

export const getMealById = async (req: Request, res: Response) =>{
    try{
        const meals = await mealService.getMealById(req.params.id);
        res.status(200).json(meals);
    }catch(e){
        res.status(500).json({error: e});
    }
}

export const createMeal = async (req: Request, res: Response) =>{
    try{
        const meal = await mealService.createMeal(req.body);
        res.status(201).json(meal);
    }catch(e){
        res.status(500).json({error: e});
    }
}

================
File: src/api/controllers/methodController.ts
================
import {Request, Response} from 'express'
import * as methodService from '../services/methodService'

export const getAllMethods = async (req: Request, res: Response) =>{
    try{
        const methods = await methodService.getAllMethods();
        res.status(200).json(methods);
    }catch(error){
        res.status(500).json({error: error});
    }
}

export const createMethod = async (req: Request, res: Response) =>{
    try{
        const method = await methodService.createMethod(req.body);
        res.status(201).json(method);
    }catch(e){
        res.status(500).json({error: e});
    }
}

================
File: src/api/controllers/methodTypeController.ts
================
import {Request, Response} from 'express'
import * as methodTypeService from '../services/methodTypeService'

export const getAllMethodType = async (req: Request, res: Response) =>{
    try{
        const me = await methodTypeService.getAllMethodType();
        res.status(200).json(me);
    }catch(error){
        res.status(500).json({error: error});
    }
}


export const createMethodType = async (req: Request, res: Response) =>{
    try{
        const me = await methodTypeService.createMethod(req.body);
        res.status(200).json(me);
    }catch(error){
        res.status(500).json({error: error});
    }
}

================
File: src/api/repository/categoryRepository.ts
================
import Category, {ICategory} from '../../data/models/category'


export const getAllCategory = async (): Promise<ICategory[]> => {
    return await Category.find();
};


export const createCategory = async (ca: ICategory): Promise<ICategory> =>{
    const category = new Category(ca);

    return await Category.create(category);
}

export const deleteCategorys = async (ids: string[]): Promise<{ deletedCount: number }>=>{
    return await Category.deleteMany({categoryID : {$in : ids}});
}

================
File: src/api/repository/cookingStepRepository.ts
================
import CookingStep, { ICookingStep } from "../../data/models/cookingStep";

export const getAllCookingSteps = async (): Promise<ICookingStep[]> => {
    return await CookingStep.find();
};

export const getCookingStepById = async (id: string): Promise<ICookingStep[] | null> => {
    return await CookingStep.find({
        $or: [
            { stepID: { $regex: id, $options: "i" } }
          ]
    });
}

================
File: src/api/repository/ingredientRepository.ts
================
import Ingredient, { IIngredient } from "../../data/models/ingredient";

export const getAllIngredients = async (): Promise<IIngredient[]> => {
    return await Ingredient.find();
};

export const getIngredientById = async (id: string): Promise<IIngredient[] | null> => {
    return await Ingredient.find({
        $or: [
            { ingredientID: { $regex: id, $options: "i" } }, 
            { descr: { $regex: id, $options: "i" } }
          ]
    });
}

export const createIngredient = async (ingredientData: IIngredient): Promise<IIngredient> =>{
    const ingredient= new Ingredient(ingredientData);
    return await Ingredient.create(ingredient);
}

export const deleteIngredients  = async (ids: string[]): Promise<{ deletedCount: number }>=>{
    return await Ingredient.deleteMany({ingredientID : {$in : ids}});
}

================
File: src/api/repository/mealRepository.ts
================
import Meal, { IMeal } from "../../data/models/meal";

export const getAllMeals = async (): Promise<IMeal[]> => {
    return await Meal.find();
};

export const getMealById = async (id: string): Promise<IMeal[] | null> => {
    return await Meal.find({
        $or: [
            { mealID: { $regex: id, $options: "i" } }, 
            { mealName: { $regex: id, $options: "i" } }
          ]
    });
}

export const deleteMeals  = async (ids: string[]): Promise<{ deletedCount: number }>=>{
    return await Meal.deleteMany({mealID : {$in : ids}});
}

================
File: src/api/repository/methodRepository.ts
================
import Method, {IMethod} from '../../data/models/method'
import Meal from '../../data/models/meal'
import CookingStepDetail from '../../data/models/cookingStepDetail'

export const getAllMethod= async (): Promise<IMethod[]> => {
    return await Method.find().populate('methodType').exec();
};

export const getMethodById = async (id: string): Promise<IMethod[] | null> => {
    return await Method.find({
        $or: [
            { categoryID: { $regex: id, $options: "i" } }, 
            { descr: { $regex: id, $options: "i" } }
          ]
    }).populate('methodType').exec();
}

export const createMethod = async (item: IMethod): Promise<IMethod> =>{
    const method = new Method(item);
    
    return await Method.create(method);
}

export const deleteMethod  = async (ids: string[]): Promise<{ deletedCount: number }>=>{
    
     
        await CookingStepDetail.updateMany(
            { method: { $in: ids } }, 
            { $pull: { method: { $in: ids } } }
        );
    
    return await Method.deleteMany({mealID : {$in : ids}});
}

================
File: src/api/repository/methodTypeRepository.ts
================
import MethodType, {IMethodType} from '../../data/models/methodType'
import Method from '../../data/models/method'
import CookingStepDetail from '../../data/models/cookingStepDetail'

export const getAllMethodType = async (): Promise<IMethodType[]> => {
    return await MethodType.find();
};

export const createMethodType= async (meType: IMethodType): Promise<IMethodType> =>{
    const type = new MethodType(meType);
    return await MethodType.create(type);
}

export const deleteMethodType  = async (ids: string[]): Promise<{ deletedCount: number }>=>{

    const methodsToDelete = await Method.find({ methodTypeID: { $in: ids } }).select("_id");
    const methodIDs = methodsToDelete.map((method) => method._id);

 
    await CookingStepDetail.updateMany(
        { method: { $in: methodIDs } }, 
        { $pull: { method: { $in: methodIDs } } }
    );

    
    await Method.deleteMany({ _id: { $in: methodIDs } });

  
    return await MethodType.deleteMany({ methodTypeID: { $in: ids } });
}

================
File: src/api/services/categoryService.ts
================
import { ICategory } from '../../data/models/category';
import * as categoryRepository from '../repository/categoryRepository'

export const getAllCategorys = async (): Promise<ICategory[]> =>{
    return await categoryRepository.getAllCategory();
}


export const createCategory = async(ingredient: ICategory): Promise<ICategory> =>{
    return await categoryRepository.createCategory(ingredient)
}

================
File: src/api/services/cookingStepService.ts
================
import * as cookingStepRepository from '../repository/cookingStepRepository'
import { ICookingStep } from '../../data/models/cookingStep'

export const getAllCookingSteps = async (): Promise<ICookingStep[]> =>{
    return await cookingStepRepository.getAllCookingSteps();
}

================
File: src/api/services/ingredientService.ts
================
import { IIngredient } from '../../data/models/ingredient';
import * as ingredientRepository from '../repository/ingredientRepository'

export const getAllIngredients = async (): Promise<IIngredient[]> =>{
    return await ingredientRepository.getAllIngredients();
}

export const getIngredientById = async(id: string): Promise<IIngredient[] | null> =>{
    return await ingredientRepository.getIngredientById(id);
}

export const createIngredient = async(ingredient: IIngredient): Promise<IIngredient> =>{
    return await ingredientRepository.createIngredient(ingredient)
}

================
File: src/api/services/mealService.ts
================
import * as mealRepository from '../repository/mealRepository'
import * as mealHandler from '../../handlers/mealHandler'
import { IMeal } from '../../data/models/meal'
import { MealRequest } from '../../data/requests/mealRequest';

export const getAllMeals = async (): Promise<IMeal[]> =>{
    return mealRepository.getAllMeals();
}

export const getMealById = async(id: string): Promise<IMeal[] | null> =>{
    return await mealRepository.getMealById(id);
}

export const createMeal = async(meal: MealRequest): Promise<boolean> =>{
    return await mealHandler.createMealHandler(meal)
}

================
File: src/api/services/methodService.ts
================
import { IMethod } from '../../data/models/method';
import * as methodRepository from '../repository/methodRepository'

export const getAllMethods = async (): Promise<IMethod[]> =>{
    return await methodRepository.getAllMethod();
}


export const createMethod = async(me: IMethod): Promise<IMethod> =>{
    return await methodRepository.createMethod(me)
}

================
File: src/api/services/methodTypeService.ts
================
import { IMethodType } from '../../data/models/methodType';
import * as methodRepository from '../repository/methodTypeRepository'

export const getAllMethodType = async (): Promise<IMethodType[]> =>{
    return await methodRepository.getAllMethodType();
}


export const createMethod = async(me: IMethodType): Promise<IMethodType> =>{
    return await methodRepository.createMethodType(me)
}

================
File: src/config/swagger.ts
================
import swaggerUi from "swagger-ui-express";
import { Application } from "express";
import path from "path";

export const setupSwagger = (app: Application) => {
  // Import dynamic để tránh lỗi TypeScript khi file chưa tồn tại
  try {
    const swaggerDocument = require('../swagger-output.json');
    app.use("/swagger", swaggerUi.serve, swaggerUi.setup(swaggerDocument));
  } catch (error) {
    console.error("Swagger documentation not generated. Run 'npm run swagger-autogen' first.");
  }
};

================
File: src/config/swaggerAutogen.ts
================
import swaggerAutogen from 'swagger-autogen';
import path from 'path';
// Tạo đối tượng định nghĩa Swagger
const doc = {
    info: {
      title: 'Cooking Meal Service API',
      description: 'API documentation for managing cooking recipes and meals',
      version: '1.0.0',
    },
    servers: [
      {
        url: '/api',
        description: 'Development server',
      },
    ],
    tags: [
      {
        name: 'Meals',
        description: 'Endpoints for managing meals',
      },
      {
        name: 'Ingredients',
        description: 'Endpoints for managing ingredients',
      },
      {
        name: 'Categories',
        description: 'Endpoints for managing categories',
      },
      {
        name: 'Methods',
        description: 'Endpoints for managing cooking methods',
      },
      {
        name: 'Method Types',
        description: 'Endpoints for managing method types',
      },
      {
        name: 'Cooking Steps',
        description: 'Endpoints for managing cooking steps',
      },
    ],
     // Định nghĩa các model sẽ được sử dụng trong API
  definitions: {
    Meal: {
      mealID: 'meal123',
      mealName: 'Spaghetti Bolognese',
      isVegan: false,
      descr: 'Delicious Italian pasta dish',
      image: 'url-to-image',
      category: ['id1', 'id2'],
    },
    Ingredient: {
      ingredientID: 'ing123',
      descr: 'Tomato',
      calories: 25,
      protein: 1.2,
      carbs: 5.7,
      fats: 0.3,
    },
    // Các model khác
  },
};

// Đường dẫn đến file output
const outputFile = path.resolve(__dirname, '../swagger-output.json');

// Danh sách file routes cần quét
const endpointsFiles = [
  path.resolve(__dirname, '../routes/mealRoute.ts'),
  path.resolve(__dirname, '../routes/ingredientRoute.ts'),
  path.resolve(__dirname, '../routes/categoryRoute.ts'),
  path.resolve(__dirname, '../routes/methodRoute.ts'),
  path.resolve(__dirname, '../routes/methodTypeRoute.ts'),
  path.resolve(__dirname, '../routes/cookingStepRoute.ts'),
];

// Tạo file swagger
swaggerAutogen(outputFile, endpointsFiles, doc);

================
File: src/data/models/category.ts
================
import mongoose, {Schema, Document} from "mongoose";
export interface ICategory extends Document {
    categoryID: string;
    descr: string;
}

export const category: Schema = new Schema({
    categoryID: {type: String, required: true, unique: true},
    desrc: {type: String, required: true}
});

export default mongoose.model<ICategory>('Category',category,'Category');

================
File: src/data/models/cookingStep.ts
================
import mongoose, {Schema, Document} from "mongoose";
import { IMeal } from "./meal";

export interface ICookingStep extends Document {
    stepID: String,
    stepDescr: String,
    time: Number,
    stepOrder: Number,
    mealID: IMeal['_id']
}


export const cookingStep : Schema = new Schema({
    stepID: {type: String, required: true, unique: true},
    stepDescr: {type: String, required: true},
    time: {type: Number, required: true},   //in minutes
    stepOrder: {type: Number, required: true},
    mealID: {type: Schema.Types.ObjectId, ref: 'Meal', required: true}
})

export default mongoose.model<ICookingStep>('CookingStep',cookingStep,'CookingStep')

================
File: src/data/models/cookingStepDetail.ts
================
import mongoose, { Schema, Document } from "mongoose";
import { ICookingStep } from "./cookingStep";
import { IMethod } from "./method";
import { IIngredient } from "./ingredient";

export interface IStepDetail extends Document {
  stepID: ICookingStep["_id"]; 
  method: IMethod["_id"]; 
  ingredients: { ingredient: IIngredient["_id"]; gram: number }[]; 
  descr: string; 
}

const stepDetailSchema: Schema = new Schema({
  stepID: { type: Schema.Types.ObjectId, ref: "CookingStep", required: true },
  method: { type: Schema.Types.ObjectId, ref: "Method", required: true },
  ingredients: [
    {
      ingredient: { type: Schema.Types.ObjectId, ref: "Ingredient", required: true },
      gram: { type: Number, required: true }, 
    },
  ],
  descr: { type: String, required: true }, 
});

export default mongoose.model<IStepDetail>("StepDetail", stepDetailSchema);

================
File: src/data/models/ingredient.ts
================
import mongoose, {Schema, Document} from "mongoose";

//nutrion will be per 100g
export interface IIngredient extends Document{
    ingredientID: string,
    descr: string,
    calories: number;
    protein: number; 
    carbs: number; 
    fats: number; 
    fiber?: number; 
    sugar?: number; 
    sodium?: number; 
}

export const ingredient : Schema = new Schema({
    ingredientID: {type: String, required: true, unique: true},
    descr: {type: String, required: true},
    calories: { type: Number, required: true },
    protein: { type: Number, required: true },
    carbs: { type: Number, required: true },
    fats: { type: Number, required: true },
    fiber: { type: Number, default: 0 },
    sugar: { type: Number, default: 0 },
    sodium: { type: Number, default: 0 },
});

export default mongoose.model<IIngredient>('Ingredient',ingredient,'Ingredient');

================
File: src/data/models/meal.ts
================
import mongoose, {Schema, Document} from "mongoose";
import { ICategory } from "./category";
import { IMethod } from "./method";
import ingredient, { IIngredient } from "./ingredient";

export interface IMeal extends Document {
    mealID: string;
    mealName: string;
    isVegan: boolean;
    descr: string;
    image: string;
    category: ICategory["_id"][]; // Array of Category references
  }
  
 const mealSchema: Schema = new Schema({
  mealID : {type: String, required: true, unique : true},
  mealName: {type: String, required: true},
  isVegan: {type: Boolean},
  descr: {type: String},
  image: {type: String},
  category: [{ type: Schema.Types.ObjectId, ref: "Category", required: true }]
});

export default mongoose.model<IMeal>('Meal', mealSchema,'Meal');

================
File: src/data/models/method.ts
================
import moongoose, {Schema, Document} from 'mongoose';
import { IMethodType } from './methodType';

export interface IMethod extends Document{
    methodID: String,
    descr: String,
    methodType: IMethodType['_id']
};

export const method: Schema = new Schema({
    methodID: {type: String, required:true, unique : true},
    descr: {type: String, required: true},
    methodType: {type: Schema.Types.ObjectId, ref: 'MethodType' ,required: true}
});

export default moongoose.model<IMethod>('Method',method,'Method');

================
File: src/data/models/methodType.ts
================
import mongoose, {Schema, Document} from "mongoose";

export interface IMethodType extends Document {
    methodTypeID: string;
    descr: string;
}

export const methodType: Schema = new Schema({
    methodTypeID: {type: String, required: true, unique: true},
    desrc: {type: String, required: true}
});

export default mongoose.model<IMethodType>('MethodType',methodType,'MethodType');

================
File: src/data/requests/mealRequest.ts
================
export interface MealRequest {
    mealID: string;
    mealName: string;
    isVegan?: boolean;
    descr?: string;
    image?: string;
    category: string[]; // Category IDs
  
    steps: {
      stepDescr: string;
      time: number;
      stepOrder: number;
      details: {
        method: string; // Method ID
        descr: string;
        ingredients: {
          ingredient: string; // Ingredient ID
          gram: number;
        }[];
      }[];
    }[];
  }

================
File: src/docs/swaggerDocs.ts
================
/**
 * Tài liệu Swagger cho các endpoint liên quan đến meal
 * File này sẽ được đọc bởi swagger-jsdoc
 */

/**
 * @swagger
 * tags:
 *   name: Meals
 *   description: API quản lý thực đơn
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     Meal:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: ID tự sinh của món ăn
 *         name:
 *           type: string
 *           description: Tên món ăn
 *         description:
 *           type: string
 *           description: Mô tả món ăn
 *         price:
 *           type: number
 *           description: Giá món ăn
 *         category:
 *           type: string
 *           description: Danh mục món ăn
 *         image:
 *           type: string
 *           description: URL hình ảnh món ăn
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Ngày tạo
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Ngày cập nhật
 *     MealInput:
 *       type: object
 *       required:
 *         - name
 *         - price
 *       properties:
 *         name:
 *           type: string
 *           description: Tên món ăn
 *         description:
 *           type: string
 *           description: Mô tả món ăn
 *         price:
 *           type: number
 *           description: Giá món ăn
 *         category:
 *           type: string
 *           description: Danh mục món ăn
 *         image:
 *           type: string
 *           description: URL hình ảnh món ăn
 */

/**
 * @swagger
 * /meal:
 *   get:
 *     summary: Lấy danh sách tất cả món ăn
 *     tags: [Meals]
 *     responses:
 *       200:
 *         description: Danh sách các món ăn
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Meal'
 *   post:
 *     summary: Tạo món ăn mới
 *     tags: [Meals]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/MealInput'
 *     responses:
 *       201:
 *         description: Tạo món ăn thành công
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Meal'
 *       400:
 *         description: Dữ liệu không hợp lệ
 */

/**
 * @swagger
 * /meal/{id}:
 *   get:
 *     summary: Lấy món ăn theo ID
 *     tags: [Meals]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID của món ăn
 *     responses:
 *       200:
 *         description: Chi tiết món ăn
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Meal'
 *       404:
 *         description: Không tìm thấy món ăn
 */

================
File: src/handlers/mealHandler.ts
================
import mongoose from "mongoose";
import Meal,{ IMeal } from "../data/models/meal";
import CookingStep,{ ICookingStep } from "../data/models/cookingStep";
import CookingStepDetail,{ IStepDetail } from "../data/models/cookingStepDetail";
import Category,{ICategory} from '../data/models/category';
import { MealRequest } from "../data/requests/mealRequest";

export const createMealHandler = async (mealData: MealRequest) => {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
        // **1. Create Meal**

        const categories = await Category.find({ categoryID: { $in: mealData.category } }).select("_id");
        const meal = await Meal.create([{ 
            mealID: mealData.mealID,
            mealName: mealData.mealName,
            isVegan: mealData.isVegan,
            descr: mealData.descr,
            image: mealData.image,
            category: categories
        }], { session });

        // **2. Create Cooking Steps for the Meal**
        const steps = mealData.steps.map((step) => ({
            stepDescr: step.stepDescr,
            time: step.time,
            stepOrder: step.stepOrder,
            mealID: meal[0].mealID,
        }));

        const createdSteps = await CookingStep.insertMany(steps, { session });

        // **3. Create Step Details**
        const stepDetails = createdSteps.flatMap((step, index) =>
            mealData.steps[index].details.map((detail) => ({
                stepID: step.stepID,
                method: detail.method,
                descr: detail.descr,
                ingredients: detail.ingredients.map((ing) => ({
                    ingredient: ing.ingredient,
                    gram: ing.gram,
                })),
            }))
        );

        await CookingStepDetail.insertMany(stepDetails, { session });

        // **Commit Transaction**
        await session.commitTransaction();
        session.endSession();

        return true; // Return the created meal
    } catch (error) {
        await session.abortTransaction();
        session.endSession();
        return false
    }
};

================
File: src/middlewares/Authenticate.ts
================
import { Request, Response, NextFunction } from "express";

export const authenticate = (req: Request, res: Response, next: NextFunction) => {
  const token = req.header("Authorization");
  if (!token) return res.status(401).json({ message: "Unauthorized" });

  try {
    
    next();
  } catch (error) {
    res.status(401).json({ message: "Invalid token" });
  }
};

================
File: src/routes/categoryRoute.ts
================
import {Router} from 'express'
import * as categoryController from '../api/controllers/categoryController'

const router = Router();

router.get('/',categoryController.getCategorys);

router.post('/',categoryController.createCategory);

export default router;

================
File: src/routes/cookingStepRoute.ts
================
import {Router} from 'express'
import * as cookingStepController from '../api/controllers/cookingStepController'

const router = Router();

router.get('/',cookingStepController.getAllCookingSteps);


export default router;

================
File: src/routes/ingredientRoute.ts
================
import { Router } from "express";
import * as ingredientController from "../api/controllers/ingredientController";

const router = Router();

router.get('/',ingredientController.getIngredients);
router.get('/:id',ingredientController.getIngredientById);
router.post('/',ingredientController.createIngredient);

export default router;

================
File: src/routes/mealRoute.ts
================
import { Router } from "express";
import * as mealController from "../api/controllers/mealController";

const router = Router();
/**
 * @swagger
 * /meal:
 *   get:
 *     summary: Get all meals
 *     tags: [Meals]
 *     responses:
 *       200:
 *         description: List of all meals
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Meal'
 */
router.get("/", mealController.getMeals);

router.get("/:id", mealController.getMealById);

router.post("/", mealController.createMeal);

export default router;

================
File: src/routes/methodRoute.ts
================
import {Router} from 'express'
import * as methodController from '../api/controllers/methodController'

const router = Router();

router.get('/',methodController.getAllMethods);

router.post('/',methodController.createMethod);

export default router;

================
File: src/routes/methodTypeRoute.ts
================
import {Router} from 'express'
import * as methodTypeController from '../api/controllers/methodTypeController'

const router = Router();

router.get('/',methodTypeController.getAllMethodType);

router.post('/',methodTypeController.createMethodType);

export default router;

================
File: src/routes/routeIndex.ts
================
import mealRoute from './mealRoute'
import categoryRoute from './categoryRoute'
import cookingStepRoute from './cookingStepRoute'
import methodRoute from './methodRoute'
import methodTypeRoute from './methodTypeRoute'
import ingredientRoute from './ingredientRoute'

export {
    mealRoute,
    categoryRoute,
    cookingStepRoute,
    methodRoute,
    methodTypeRoute,
    ingredientRoute
  };

================
File: src/server.ts
================
import express, {Application} from 'express';
import dotenv from 'dotenv';
import {connectDB } from './config/database';
import { setupSwagger } from "./config/swagger";
import * as route from "./routes/routeIndex";

dotenv.config;



const app: Application = express();
const PORT: number = Number(process.env.PORT) || 4000;
const API: string = String(process.env.API_URL);



connectDB();
app.use(express.json());

setupSwagger(app);

// Routes
app.use(API+'/meal', route.mealRoute);
app.use(API+'/category',route.categoryRoute);
app.use(API+'/method',route.methodRoute);
app.use(API+'/methodType',route.methodTypeRoute);
app.use(API+'/ingredient',route.ingredientRoute);
app.use(API+'/cookingStep',route.cookingStepRoute);

// Start Server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log(`Swagger Docs available at http://localhost:${PORT}/swagger`);
});

================
File: src/swagger-output.json
================
{
  "swagger": "2.0",
  "info": {
    "title": "Cooking Meal Service API",
    "description": "API documentation for managing cooking recipes and meals",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "servers": [
    {
      "url": "/api",
      "description": "Development server"
    }
  ],
  "basePath": "/",
  "tags": [
    {
      "name": "Meals",
      "description": "Endpoints for managing meals"
    },
    {
      "name": "Ingredients",
      "description": "Endpoints for managing ingredients"
    },
    {
      "name": "Categories",
      "description": "Endpoints for managing categories"
    },
    {
      "name": "Methods",
      "description": "Endpoints for managing cooking methods"
    },
    {
      "name": "Method Types",
      "description": "Endpoints for managing method types"
    },
    {
      "name": "Cooking Steps",
      "description": "Endpoints for managing cooking steps"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "definitions": {
    "Meal": {
      "type": "object",
      "properties": {
        "mealID": {
          "type": "string",
          "example": "meal123"
        },
        "mealName": {
          "type": "string",
          "example": "Spaghetti Bolognese"
        },
        "isVegan": {
          "type": "boolean",
          "example": false
        },
        "descr": {
          "type": "string",
          "example": "Delicious Italian pasta dish"
        },
        "image": {
          "type": "string",
          "example": "url-to-image"
        },
        "category": {
          "type": "array",
          "example": [
            "id1",
            "id2"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Ingredient": {
      "type": "object",
      "properties": {
        "ingredientID": {
          "type": "string",
          "example": "ing123"
        },
        "descr": {
          "type": "string",
          "example": "Tomato"
        },
        "calories": {
          "type": "number",
          "example": 25
        },
        "protein": {
          "type": "number",
          "example": 1.2
        },
        "carbs": {
          "type": "number",
          "example": 5.7
        },
        "fats": {
          "type": "number",
          "example": 0.3
        }
      }
    }
  }
}

================
File: src/utils/errorHandler.ts
================
import { Request, Response, NextFunction } from "express";

export const errorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  console.error(err.message);
  res.status(err.statusCode).json({ message: "Internal Server Error" });
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "sourceMap": true  
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}
